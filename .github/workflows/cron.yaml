name: Build remote repo only if new commits were pushed
on:
  workflow_dispatch:
  push:
  schedule:
    - cron: '0 7 * * *'
jobs:
  check:
    name: Check remote repo for new commits
    runs-on: ubuntu-latest
    steps:
      - name: Use GitHub API to poll commits
        run: |
          curl -sL "https://api.github.com/repos/$REMOTE_REPOSITORY/commits?sha=$REMOTE_BRANCH&per_page=1" | jq -r '[.[]][0]' > commit.json
        env:
          REMOTE_REPOSITORY: robimarko/openwrt
          REMOTE_BRANCH: ipq807x-5.15-pr
      - name: Calculate hours since last commit
        id: calc
        run: |
          date="$(jq -r '.commit.committer.date' commit.json)"
          timestamp=$(date --utc -d "$date" +%s)
          hours=$(( ( $(date --utc +%s) - $timestamp ) / 3600 ))
          echo "Last commit date: $date"
          echo "Hours since last commit: $hours"
          echo "COMMIT_AGE=$hours" >> $GITHUB_OUTPUT
    outputs:
      commit_age: ${{ steps.calc.outputs.COMMIT_AGE }}
  build:
    name: Build the remote repository
    needs: check
    runs-on: ubuntu-latest
    if: ${{ needs.check.outputs.commit_age <= 24 || github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Show inputs received from previous job
        env:
          COMMIT_AGE: ${{ needs.check.outputs.commit_age }}
        run: |
          echo "Build triggered with commits last pushed $COMMIT_AGE hours ago"
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: robimarko/openwrt
          ref: ipq807x-5.15-pr
      - name: Update and install feeds
        run: |
          # curl -L https://github.com/openwrt/openwrt/pull/10566.patch | git apply
          ./scripts/feeds update -a
          # curl -L https://github.com/openwrt/packages/pull/19535.patch | git apply --directory=feeds/packages
          ./scripts/feeds install -a
      - name: Generate config for Xiaomi AX3600
        run: |
          echo "CONFIG_TARGET_ipq807x=y" > .config
          echo "CONFIG_TARGET_ipq807x_generic=y\n" >> .config
          echo "CONFIG_TARGET_ipq807x_generic_DEVICE_xiaomi_ax3600=y\n" >> .config
          echo "CONFIG_TARGET_ROOTFS_INITRAMFS=y\n" >> .config
          echo "CONFIG_PACKAGE_wpad-basic-wolfssl=n\n" >> .config
          echo "CONFIG_PACKAGE_wpad-wolfssl=y\n" >> .config
          # echo "CONFIG_PACKAGE_libwolfssl=n\n" >> .config
          # echo "CONFIG_PACKAGE_libwolfsslcpu-crypto=y\n" >> .config
          # firmware
          echo "CONFIG_PACKAGE_kmod-qca-nss-drv-bridge-mgr=m\n" >> .config
          echo "CONFIG_PACKAGE_kmod-qca-nss-ecm=m\n" >> .config
          echo "CONFIG_PACKAGE_nss-firmware-ipq8074=m\n" >> .config
          # services and tools
          echo "CONFIG_PACKAGE_6in4=y\n" >> .config
          echo "CONFIG_PACKAGE_bind-dig=y\n" >> .config
          echo "CONFIG_PACKAGE_collectd-mod-ping=y\n" >> .config
          echo "CONFIG_PACKAGE_curl=y\n" >> .config
          echo "CONFIG_PACKAGE_ddns-scripts-cloudflare=y\n" >> .config
          echo "CONFIG_PACKAGE_dnsmasq=n\n" >> .config
          echo "CONFIG_PACKAGE_dnsmasq-full=y\n" >> .config
          echo "CONFIG_PACKAGE_etherwake=y\n" >> .config
          echo "CONFIG_PACKAGE_haproxy=y\n" >> .config
          echo "CONFIG_PACKAGE_hostapd-utils=y\n" >> .config
          echo "CONFIG_PACKAGE_https-dns-proxy=y\n" >> .config
          echo "CONFIG_PACKAGE_htop=y\n" >> .config
          echo "CONFIG_PACKAGE_igmpproxy=y\n" >> .config
          echo "CONFIG_PACKAGE_iperf=y\n" >> .config
          echo "CONFIG_PACKAGE_iperf3=y\n" >> .config
          echo "CONFIG_PACKAGE_mtr-json=y\n" >> .config
          echo "CONFIG_PACKAGE_nmap=y\n" >> .config
          echo "CONFIG_PACKAGE_openssl-util=y\n" >> .config
          echo "CONFIG_PACKAGE_openvpn-openssl=y\n" >> .config
          echo "CONFIG_PACKAGE_qrencode=y\n" >> .config
          echo "CONFIG_PACKAGE_rsync=m\n" >> .config
          echo "CONFIG_PACKAGE_shadowsocks-libev-ss-local=y\n" >> .config
          echo "CONFIG_PACKAGE_shadowsocks-libev-ss-redir=y\n" >> .config
          echo "CONFIG_PACKAGE_shadowsocks-libev-ss-rules=y\n" >> .config
          echo "CONFIG_PACKAGE_shadowsocks-libev-ss-tunnel=y\n" >> .config
          echo "CONFIG_PACKAGE_stubby=y\n" >> .config
          echo "CONFIG_PACKAGE_tcpdump=y\n" >> .config
          echo "CONFIG_PACKAGE_unzip=y\n" >> .config
          echo "CONFIG_PACKAGE_wget-ssl=y\n" >> .config
          echo "CONFIG_PACKAGE_yggdrasil=m\n" >> .config
          # luci
          echo "CONFIG_PACKAGE_luci=y\n" >> .config
          echo "CONFIG_PACKAGE_luci-app-ddns=y\n" >> .config
          echo "CONFIG_PACKAGE_luci-app-https-dns-proxy=y\n" >> .config
          echo "CONFIG_PACKAGE_luci-app-nlbwmon=y\n" >> .config
          echo "CONFIG_PACKAGE_luci-app-openvpn=y\n" >> .config
          echo "CONFIG_PACKAGE_luci-app-shadowsocks-libev=y\n" >> .config
          echo "CONFIG_PACKAGE_luci-app-statistics=y\n" >> .config
          echo "CONFIG_PACKAGE_luci-app-uhttpd=y\n" >> .config
          echo "CONFIG_PACKAGE_luci-app-upnp=y\n" >> .config
          echo "CONFIG_PACKAGE_luci-app-yggdrasil=m\n" >> .config
          echo "CONFIG_PACKAGE_luci-proto-wireguard=y\n" >> .config
          echo "CONFIG_PACKAGE_luci-ssl=y\n" >> .config
          echo "CONFIG_PACKAGE_luci-ssl-nginx=m\n" >> .config
          # pbr
          echo "CONFIG_PACKAGE_ip-full=y\n" >> .config
          make defconfig
      - name: Enable WiFi on default config
        if: ${{ false }}
        run: |
          mkdir -p files/etc/uci-defaults
          cat > files/etc/uci-defaults/xxx_config << EOF
          uci set network.lan.ipaddr=192.168.31.1
          uci set wireless.radio1.disabled=0
          uci commit
          EOF
      - name: (Disabled) Apply affinity modifications (by @castiel652) to spread the load to multiple cores
        if: ${{ false }}
        run: |
          mkdir -p files/etc
          cat > files/etc/rc.local << EOF
          #assign 4 rx interrupts to each cores
          echo 8 > /proc/irq/50/smp_affinity
          echo 4 > /proc/irq/51/smp_affinity
          echo 2 > /proc/irq/52/smp_affinity
          echo 1 > /proc/irq/53/smp_affinity
          
          #assign 3 tcl completions to 3 CPUs
          echo 4 > /proc/irq/73/smp_affinity
          echo 2 > /proc/irq/74/smp_affinity
          echo 1 > /proc/irq/75/smp_affinity
          
          exit 0
          EOF
      - name: (Disabled) Enable RX decap offload
        if: ${{ false }}
        run: |
          mkdir -p files/etc/modules.d
          cat > files/etc/modules.d/ath11k << EOF
          ath11k frame_mode=2
          EOF
      - name: Download package sources
        run: make download V=s
      - name: Build tools
        run: |
          make tools/install -j$(nproc) V=s || \
          make tools/install V=s
      - name: Build toolchain
        run: |
          make toolchain/install -j$(nproc) V=s || \
          make toolchain/install V=s
      - name: Build target images
        run: |
          make -j$(nproc) V=s || \
          make V=s
      - name: Remove packages
        run: rm -rf bin/targets/ipq807x/generic/packages
      - name: TAR output
        run: tar -cvf ipq807xx-images.tar bin/targets/ipq807x/generic
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ipq807x-images
          path: ipq807xx-images.tar
  release:
    name: Upload artifacts as release
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download the image artifacts
        uses: actions/download-artifact@v3
        with:
          name: ipq807x-images
      - name: Extract the image artifacts
        run: tar xf ipq807xx-images.tar
      - name: Get the current date
        run: echo "NOW=$(date +%F-%H%M)" >> $GITHUB_ENV
      - name: Create a release
        uses: "ncipollo/release-action@v1"
        with:
          name: "Updated prebuilt images ${{ env.NOW }}"
          tag: "ipq807x-${{ env.NOW }}"
          generateReleaseNotes: true
          makeLatest: true
          artifacts: bin/targets/ipq807x/generic/*
